{
	"info": {
		"_postman_id": "d3a2417e-cb1e-4270-9c3c-977bb23fb7c0",
		"name": "Account-Service-Option2a",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39796714"
	},
	"item": [
		{
			"name": "Successful",
			"item": [
				{
					"name": "Natural Person with BrandA - Business Current Account (BCA)",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"transactionId\": \"TXN123456789\",\r\n    \"fkn\": \"NP123456789\",\r\n    \"productCode\": \"BrandA-BCA\",\r\n    \"simulateFailure\": \"NONE\",\r\n    \"failureTarget\": \"NONE\",\r\n    \"pinSet\": true,\r\n    \"onlineBankingOptIn\": true,\r\n    \"customerType\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/products/onboard",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"products",
								"onboard"
							]
						}
					},
					"response": []
				},
				{
					"name": "Natural Person with BrandB - Flex Funds (FF)",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"transactionId\": \"TXN987654321\",\r\n    \"fkn\": \"NP987654321\",\r\n    \"productCode\": \"BrandB-FF\",\r\n    \"simulateFailure\": \"NONE\",\r\n    \"failureTarget\": \"NONE\",\r\n    \"pinSet\": false,\r\n    \"onlineBankingOptIn\": false,\r\n    \"customerType\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/products/onboard",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"products",
								"onboard"
							]
						}
					},
					"response": []
				},
				{
					"name": "Natural Person with BrandC - Deposits (DEP)",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"transactionId\": \"TXN999999999999\",\r\n    \"fkn\": \"NP123980123\",\r\n    \"productCode\": \"BrandC-DEP\",\r\n    \"simulateFailure\": \"NONE\",\r\n    \"failureTarget\": \"NONE\",\r\n    \"pinSet\": true,\r\n    \"onlineBankingOptIn\": false,\r\n    \"customerType\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/products/onboard",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"products",
								"onboard"
							]
						}
					},
					"response": []
				},
				{
					"name": "Natural Person (NP), BrandA, Business Current Account (BCA), All features enabled",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"transactionId\": \"TXN-NP-A-BCA-POS-1\",\r\n    \"fkn\": \"NP1234567890\",\r\n    \"productCode\": \"BrandA-BCA\",\r\n    \"simulateFailure\": \"NONE\",\r\n    \"failureTarget\": \"NONE\",\r\n    \"pinSet\": true,\r\n    \"onlineBankingOptIn\": true,\r\n    \"customerType\": 1\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/products/onboard",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"products",
								"onboard"
							]
						}
					},
					"response": []
				},
				{
					"name": "Legal Entity (LE), BrandB, Savings (SAV), Online Banking disabled:",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"transactionId\": \"TXN-LE-B-SAV-POS-2\",\r\n    \"fkn\": \"LE9876543210\",\r\n    \"productCode\": \"BrandB-SAV\",\r\n    \"simulateFailure\": \"NONE\",\r\n    \"failureTarget\": \"NONE\",\r\n    \"pinSet\": true,  // Should this even be applicable for LE? Consider business logic.\r\n    \"onlineBankingOptIn\": false,\r\n    \"customerType\": 3\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/products/onboard",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"products",
								"onboard"
							]
						}
					},
					"response": []
				},
				{
					"name": "LE, BrandC, Deposits (DEP), Minimal features:",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"transactionId\": \"TXN-LE-C-DEP-POS-3\",\r\n    \"fkn\": \"LE1011121314\",\r\n    \"productCode\": \"BrandC-DEP\",\r\n    \"simulateFailure\": \"NONE\",\r\n    \"failureTarget\": \"NONE\",\r\n    \"pinSet\": false, // Likely not applicable for DEP\r\n    \"onlineBankingOptIn\": false, // DEP usually doesn't have online banking\r\n    \"customerType\": 3\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/products/onboard",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"products",
								"onboard"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Failure Simulations",
			"item": [
				{
					"name": "NP, BrandA, Flex Funds (FF), Schufa Failure:",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"transactionId\": \"TXN-NP-A-FF-FAIL-SCHUFA\",\r\n    \"fkn\": \"NP1928374655\",\r\n    \"productCode\": \"BrandA-FF\",\r\n    \"simulateFailure\": \"BAD_REQUEST\",\r\n    \"failureTarget\": \"schufa-check\", // More specific failure target\r\n    \"pinSet\": false, // Irrelevant in this failure scenario\r\n    \"onlineBankingOptIn\": true, // Irrelevant in this failure scenario\r\n    \"customerType\": 1\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/products/onboard",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"products",
								"onboard"
							]
						}
					},
					"response": []
				},
				{
					"name": "LE, BrandB, BCA, Account Opening Failure:",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"transactionId\": \"TXN-LE-B-BCA-FAIL-ACCOUNT\",\r\n    \"fkn\": \"LE1413121110\",\r\n    \"productCode\": \"BrandB-BCA\",\r\n    \"simulateFailure\": \"INTERNAL_SERVER_ERROR\", // Different error type\r\n    \"failureTarget\": \"account-opening\",\r\n    \"pinSet\": true, // Irrelevant\r\n    \"onlineBankingOptIn\": true, // Irrelevant\r\n    \"customerType\": 3\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/products/onboard",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"products",
								"onboard"
							]
						}
					},
					"response": []
				},
				{
					"name": "LE, BrandC, SAV, Online Banking Activation Failure",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"transactionId\": \"TXN-LE-C-SAV-FAIL-ONLINE\",\r\n    \"fkn\": \"LE1716151413\",\r\n    \"productCode\": \"BrandC-SAV\",\r\n    \"simulateFailure\": \"SERVICE_UNAVAILABLE\", \r\n    \"failureTarget\": \"activate-online-banking\",\r\n    \"pinSet\": true,\r\n    \"onlineBankingOptIn\": true,  \r\n    \"customerType\": 3\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/products/onboard",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"products",
								"onboard"
							]
						}
					},
					"response": []
				},
				{
					"name": "NP, BrandA, BCA PIN Activation Failure",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"transactionId\": \"TXN66666666\",\r\n    \"fkn\": \"NP67890\",\r\n    \"productCode\": \"BrandA-BCA\",\r\n    \"simulateFailure\": \"BAD_REQUEST\",\r\n    \"failureTarget\": \"activate-pin\",\r\n    \"pinSet\": true,\r\n    \"onlineBankingOptIn\": false,\r\n    \"customerType\": 1\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/products/onboard",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"products",
								"onboard"
							]
						}
					},
					"response": []
				},
				{
					"name": "LE, BrandC, BCA, Account Opening Failure",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n    \"transactionId\": \"TXN88888888\",\r\n    \"fkn\": \"LE56789\",\r\n    \"productCode\": \"BrandC-BCA\",\r\n    \"simulateFailure\": \"NETWORK_ERROR\",\r\n    \"failureTarget\": \"account-opening\",\r\n    \"pinSet\": false,\r\n    \"onlineBankingOptIn\": true,\r\n    \"customerType\": 3\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/products/onboard",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"products",
								"onboard"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edge Case: Invalid Brand",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"transactionId\": \"TXN-INVALID-BRAND\",\r\n    \"fkn\": \"NP123456789\",\r\n    \"productCode\": \"BrandX-BCA\",\r\n    \"simulateFailure\": \"NONE\",\r\n    \"failureTarget\": \"NONE\",\r\n    \"pinSet\": true,\r\n    \"onlineBankingOptIn\": true,\r\n    \"customerType\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/products/onboard",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"products",
								"onboard"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edge Case: Invalid Product",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"transactionId\": \"TXN-INVALID-BRAND\",\r\n    \"fkn\": \"NP123456789\",\r\n    \"productCode\": \"BrandA-XXX\",\r\n    \"simulateFailure\": \"NONE\",\r\n    \"failureTarget\": \"NONE\",\r\n    \"pinSet\": true,\r\n    \"onlineBankingOptIn\": true,\r\n    \"customerType\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/products/onboard",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"products",
								"onboard"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Product Configuration",
			"item": [
				{
					"name": "Product Config",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var template = `\r",
									"<style type=\"text/css\">\r",
									"  .tftable {\r",
									"    font-size: 14px;\r",
									"    color: #333333;\r",
									"    width: 100%;\r",
									"    border-width: 1px;\r",
									"    border-color: #87ceeb;\r",
									"    border-collapse: collapse;\r",
									"  }\r",
									"\r",
									"  .tftable th {\r",
									"    font-size: 18px;\r",
									"    background-color: #87ceeb;\r",
									"    border-width: 1px;\r",
									"    padding: 8px;\r",
									"    border-style: solid;\r",
									"    border-color: #87ceeb;\r",
									"    text-align: left;\r",
									"  }\r",
									"\r",
									"  .tftable tr {\r",
									"    background-color: #ffffff;\r",
									"  }\r",
									"\r",
									"  .tftable td {\r",
									"    font-size: 14px;\r",
									"    border-width: 1px;\r",
									"    padding: 8px;\r",
									"    border-style: solid;\r",
									"    border-color: #87ceeb;\r",
									"  }\r",
									"\r",
									"  .tftable tr:hover {\r",
									"    background-color: #e0ffff;\r",
									"  }\r",
									"\r",
									"  .brand-header {\r",
									"    font-weight: bold;\r",
									"    font-size: 16px;\r",
									"    padding: 8px;\r",
									"    background-color: #f0f0f0;\r",
									"  }\r",
									"</style>\r",
									"\r",
									"<table class=\"tftable\" border=\"1\">\r",
									"  <tr>\r",
									"    <th>Brand</th>\r",
									"    <th>Name</th>\r",
									"    <th>Product Code</th>\r",
									"    <th>Schufa</th>\r",
									"    <th>Account Opening</th>\r",
									"    <th>Pin Activation</th>\r",
									"    <th>Online Banking Activation</th>\r",
									"    <th>Telephone Banking</th>\r",
									"    <th>SMS Notifications</th>\r",
									"    <th>Email Alerts</th>\r",
									"  </tr>\r",
									"\r",
									"  {{#each response}}\r",
									"    <tr>\r",
									"      <td colspan=\"10\" class=\"brand-header\">{{@key}}</td>\r",
									"    </tr>\r",
									"    {{#each this}}\r",
									"      <tr>\r",
									"        <td></td>\r",
									"        <td>{{name}}</td>\r",
									"        <td>{{productCode}}</td>\r",
									"        <td>{{features.schufa}}</td>\r",
									"        <td>{{features.accountOpening}}</td>\r",
									"        <td>{{features.pinActivation}}</td>\r",
									"        <td>{{features.onlineBankingActivation.enabled}}</td>\r",
									"        <td>{{features.onlineBankingActivation.subFeatures.telephoneBanking}}</td>\r",
									"        <td>{{features.onlineBankingActivation.subFeatures.smsNotifications}}</td>\r",
									"        <td>{{features.onlineBankingActivation.subFeatures.emailAlerts}}</td>\r",
									"      </tr>\r",
									"    {{/each}}\r",
									"  {{/each}}\r",
									"</table>\r",
									"`;\r",
									"\r",
									"function constructVisualizerPayload() {\r",
									"  var res = pm.response.json();\r",
									"  return { response: res };\r",
									"}\r",
									"\r",
									"pm.visualizer.set(template, constructVisualizerPayload());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/products/config",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"products",
								"config"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "API Logs",
			"item": [
				{
					"name": "Search by fkn",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var template = `\r",
									"<style type=\"text/css\">\r",
									"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
									"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
									"    .tftable tr {background-color:#ffffff;}\r",
									"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
									"    .tftable tr:hover {background-color:#e0ffff;}\r",
									"</style>\r",
									"\r",
									"<table class=\"tftable\" border=\"1\">\r",
									"    <tr>\r",
									"        <th>ID</th>\r",
									"        <th>Transaction ID</th>\r",
									"        <th>Feature Name</th>\r",
									"        <th>FKN</th>\r",
									"        <th>Product Code</th>\r",
									"        <th>HTTP Status</th>\r",
									"        <th>Request Payload</th>\r",
									"        <th>Response Body</th>\r",
									"        <th>Created At</th>\r",
									"    </tr>\r",
									"    \r",
									"    {{#each response}}\r",
									"        <tr id=row_{{@key}}>\r",
									"            <td>{{id}}</td>\r",
									"            <td>{{transactionId}}</td>\r",
									"            <td>{{featureName}}</td>\r",
									"            <td>{{fkn}}</td>\r",
									"            <td>{{productCode}}</td>\r",
									"            <td>{{httpStatus}}</td>\r",
									"            <td>{{requestPayload}}</td>\r",
									"            <td>{{responseBody}}</td>\r",
									"            <td>{{createdAt}}</td>\r",
									"        </tr>\r",
									"    {{/each}}\r",
									"</table>\r",
									"`;\r",
									"\r",
									"function constructVisualizerPayload() {\r",
									"    var vizData = pm.response.json();\r",
									"\r",
									"    return {response: vizData}\r",
									"}\r",
									"\r",
									"pm.visualizer.set(template, constructVisualizerPayload());\r",
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the schema for each log object in the response\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function(log) {\r",
									"        pm.expect(log).to.have.property('id').that.is.a('number');\r",
									"        pm.expect(log).to.have.property('transactionId').that.is.a('string');\r",
									"        pm.expect(log).to.have.property('featureName').that.is.a('string');\r",
									"        pm.expect(log).to.have.property('fkn').that.is.a('string');\r",
									"        pm.expect(log).to.have.property('productCode').that.is.a('string');\r",
									"        pm.expect(log).to.have.property('httpStatus').that.is.a('string');\r",
									"        pm.expect(log).to.have.property('requestPayload').that.is.a('string');\r",
									"        pm.expect(log).to.have.property('responseBody').that.is.a('string');\r",
									"        pm.expect(log).to.have.property('createdAt').that.is.a('string');\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/call-logs?transactionId=&fkn=NP67890&featureName=&fromDate=&toDate=",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"call-logs"
							],
							"query": [
								{
									"key": "transactionId",
									"value": ""
								},
								{
									"key": "fkn",
									"value": "NP67890"
								},
								{
									"key": "featureName",
									"value": ""
								},
								{
									"key": "fromDate",
									"value": ""
								},
								{
									"key": "toDate",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search by Transaction Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var template = `\r",
									"<style type=\"text/css\">\r",
									"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
									"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
									"    .tftable tr {background-color:#ffffff;}\r",
									"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
									"    .tftable tr:hover {background-color:#e0ffff;}\r",
									"</style>\r",
									"\r",
									"<table class=\"tftable\" border=\"1\">\r",
									"    <tr>\r",
									"        <th>ID</th>\r",
									"        <th>Transaction ID</th>\r",
									"        <th>Feature Name</th>\r",
									"        <th>FKN</th>\r",
									"        <th>Product Code</th>\r",
									"        <th>HTTP Status</th>\r",
									"        <th>Request Payload</th>\r",
									"        <th>Response Body</th>\r",
									"        <th>Created At</th>\r",
									"    </tr>\r",
									"    \r",
									"    {{#each response}}\r",
									"        <tr id=row_{{@key}}>\r",
									"            <td>{{id}}</td>\r",
									"            <td>{{transactionId}}</td>\r",
									"            <td>{{featureName}}</td>\r",
									"            <td>{{fkn}}</td>\r",
									"            <td>{{productCode}}</td>\r",
									"            <td>{{httpStatus}}</td>\r",
									"            <td>{{requestPayload}}</td>\r",
									"            <td>{{responseBody}}</td>\r",
									"            <td>{{createdAt}}</td>\r",
									"        </tr>\r",
									"    {{/each}}\r",
									"</table>\r",
									"`;\r",
									"\r",
									"function constructVisualizerPayload() {\r",
									"    var vizData = pm.response.json();\r",
									"\r",
									"    return {response: vizData}\r",
									"}\r",
									"\r",
									"pm.visualizer.set(template, constructVisualizerPayload());\r",
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the schema for each log object in the response\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function(log) {\r",
									"        pm.expect(log).to.have.property('id').that.is.a('number');\r",
									"        pm.expect(log).to.have.property('transactionId').that.is.a('string');\r",
									"        pm.expect(log).to.have.property('featureName').that.is.a('string');\r",
									"        pm.expect(log).to.have.property('fkn').that.is.a('string');\r",
									"        pm.expect(log).to.have.property('productCode').that.is.a('string');\r",
									"        pm.expect(log).to.have.property('httpStatus').that.is.a('string');\r",
									"        pm.expect(log).to.have.property('requestPayload').that.is.a('string');\r",
									"        pm.expect(log).to.have.property('responseBody').that.is.a('string');\r",
									"        pm.expect(log).to.have.property('createdAt').that.is.a('string');\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/call-logs?transactionId=TXN-LE-C-SAV-FAIL-ONLINE&fkn=&featureName=&fromDate=&toDate=",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"call-logs"
							],
							"query": [
								{
									"key": "transactionId",
									"value": "TXN-LE-C-SAV-FAIL-ONLINE"
								},
								{
									"key": "fkn",
									"value": ""
								},
								{
									"key": "featureName",
									"value": ""
								},
								{
									"key": "fromDate",
									"value": ""
								},
								{
									"key": "toDate",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search by Feature Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var template = `\r",
									"<style type=\"text/css\">\r",
									"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
									"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
									"    .tftable tr {background-color:#ffffff;}\r",
									"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
									"    .tftable tr:hover {background-color:#e0ffff;}\r",
									"</style>\r",
									"\r",
									"<table class=\"tftable\" border=\"1\">\r",
									"    <tr>\r",
									"        <th>ID</th>\r",
									"        <th>Transaction ID</th>\r",
									"        <th>Feature Name</th>\r",
									"        <th>FKN</th>\r",
									"        <th>Product Code</th>\r",
									"        <th>HTTP Status</th>\r",
									"        <th>Request Payload</th>\r",
									"        <th>Response Body</th>\r",
									"        <th>Created At</th>\r",
									"    </tr>\r",
									"    \r",
									"    {{#each response}}\r",
									"        <tr id=row_{{@key}}>\r",
									"            <td>{{id}}</td>\r",
									"            <td>{{transactionId}}</td>\r",
									"            <td>{{featureName}}</td>\r",
									"            <td>{{fkn}}</td>\r",
									"            <td>{{productCode}}</td>\r",
									"            <td>{{httpStatus}}</td>\r",
									"            <td>{{requestPayload}}</td>\r",
									"            <td>{{responseBody}}</td>\r",
									"            <td>{{createdAt}}</td>\r",
									"        </tr>\r",
									"    {{/each}}\r",
									"</table>\r",
									"`;\r",
									"\r",
									"function constructVisualizerPayload() {\r",
									"    var vizData = pm.response.json();\r",
									"\r",
									"    return {response: vizData}\r",
									"}\r",
									"\r",
									"pm.visualizer.set(template, constructVisualizerPayload());\r",
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the schema for each log object in the response\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function(log) {\r",
									"        pm.expect(log).to.have.property('id').that.is.a('number');\r",
									"        pm.expect(log).to.have.property('transactionId').that.is.a('string');\r",
									"        pm.expect(log).to.have.property('featureName').that.is.a('string');\r",
									"        pm.expect(log).to.have.property('fkn').that.is.a('string');\r",
									"        pm.expect(log).to.have.property('productCode').that.is.a('string');\r",
									"        pm.expect(log).to.have.property('httpStatus').that.is.a('string');\r",
									"        pm.expect(log).to.have.property('requestPayload').that.is.a('string');\r",
									"        pm.expect(log).to.have.property('responseBody').that.is.a('string');\r",
									"        pm.expect(log).to.have.property('createdAt').that.is.a('string');\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/call-logs?transactionId=&fkn=&featureName=schufa-check&fromDate=&toDate=",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"call-logs"
							],
							"query": [
								{
									"key": "transactionId",
									"value": ""
								},
								{
									"key": "fkn",
									"value": ""
								},
								{
									"key": "featureName",
									"value": "schufa-check"
								},
								{
									"key": "fromDate",
									"value": ""
								},
								{
									"key": "toDate",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search by Time Duration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var template = `\r",
									"<style type=\"text/css\">\r",
									"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
									"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
									"    .tftable tr {background-color:#ffffff;}\r",
									"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
									"    .tftable tr:hover {background-color:#e0ffff;}\r",
									"</style>\r",
									"\r",
									"<table class=\"tftable\" border=\"1\">\r",
									"    <tr>\r",
									"        <th>ID</th>\r",
									"        <th>Transaction ID</th>\r",
									"        <th>Feature Name</th>\r",
									"        <th>FKN</th>\r",
									"        <th>Product Code</th>\r",
									"        <th>HTTP Status</th>\r",
									"        <th>Request Payload</th>\r",
									"        <th>Response Body</th>\r",
									"        <th>Created At</th>\r",
									"    </tr>\r",
									"    \r",
									"    {{#each response}}\r",
									"        <tr id=row_{{@key}}>\r",
									"            <td>{{id}}</td>\r",
									"            <td>{{transactionId}}</td>\r",
									"            <td>{{featureName}}</td>\r",
									"            <td>{{fkn}}</td>\r",
									"            <td>{{productCode}}</td>\r",
									"            <td>{{httpStatus}}</td>\r",
									"            <td>{{requestPayload}}</td>\r",
									"            <td>{{responseBody}}</td>\r",
									"            <td>{{createdAt}}</td>\r",
									"        </tr>\r",
									"    {{/each}}\r",
									"</table>\r",
									"`;\r",
									"\r",
									"function constructVisualizerPayload() {\r",
									"    var vizData = pm.response.json();\r",
									"\r",
									"    return {response: vizData}\r",
									"}\r",
									"\r",
									"pm.visualizer.set(template, constructVisualizerPayload());\r",
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the schema for each log object in the response\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function(log) {\r",
									"        pm.expect(log).to.have.property('id').that.is.a('number');\r",
									"        pm.expect(log).to.have.property('transactionId').that.is.a('string');\r",
									"        pm.expect(log).to.have.property('featureName').that.is.a('string');\r",
									"        pm.expect(log).to.have.property('fkn').that.is.a('string');\r",
									"        pm.expect(log).to.have.property('productCode').that.is.a('string');\r",
									"        pm.expect(log).to.have.property('httpStatus').that.is.a('string');\r",
									"        pm.expect(log).to.have.property('requestPayload').that.is.a('string');\r",
									"        pm.expect(log).to.have.property('responseBody').that.is.a('string');\r",
									"        pm.expect(log).to.have.property('createdAt').that.is.a('string');\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/call-logs?transactionId=&fkn=&featureName=&fromDate=2024-11-23T00:00:00&toDate=2024-11-23T23:59:59",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"call-logs"
							],
							"query": [
								{
									"key": "transactionId",
									"value": ""
								},
								{
									"key": "fkn",
									"value": ""
								},
								{
									"key": "featureName",
									"value": ""
								},
								{
									"key": "fromDate",
									"value": "2024-11-23T00:00:00"
								},
								{
									"key": "toDate",
									"value": "2024-11-23T23:59:59"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search by FKN and TX id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var template = `\r",
									"<style type=\"text/css\">\r",
									"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
									"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
									"    .tftable tr {background-color:#ffffff;}\r",
									"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
									"    .tftable tr:hover {background-color:#e0ffff;}\r",
									"</style>\r",
									"\r",
									"<table class=\"tftable\" border=\"1\">\r",
									"    <tr>\r",
									"        <th>ID</th>\r",
									"        <th>Transaction ID</th>\r",
									"        <th>Feature Name</th>\r",
									"        <th>FKN</th>\r",
									"        <th>Product Code</th>\r",
									"        <th>HTTP Status</th>\r",
									"        <th>Request Payload</th>\r",
									"        <th>Response Body</th>\r",
									"        <th>Created At</th>\r",
									"    </tr>\r",
									"    \r",
									"    {{#each response}}\r",
									"        <tr id=row_{{@key}}>\r",
									"            <td>{{id}}</td>\r",
									"            <td>{{transactionId}}</td>\r",
									"            <td>{{featureName}}</td>\r",
									"            <td>{{fkn}}</td>\r",
									"            <td>{{productCode}}</td>\r",
									"            <td>{{httpStatus}}</td>\r",
									"            <td>{{requestPayload}}</td>\r",
									"            <td>{{responseBody}}</td>\r",
									"            <td>{{createdAt}}</td>\r",
									"        </tr>\r",
									"    {{/each}}\r",
									"</table>\r",
									"`;\r",
									"\r",
									"function constructVisualizerPayload() {\r",
									"    var vizData = pm.response.json();\r",
									"\r",
									"    return {response: vizData}\r",
									"}\r",
									"\r",
									"pm.visualizer.set(template, constructVisualizerPayload());\r",
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the schema for each log object in the response\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function(log) {\r",
									"        pm.expect(log).to.have.property('id').that.is.a('number');\r",
									"        pm.expect(log).to.have.property('transactionId').that.is.a('string');\r",
									"        pm.expect(log).to.have.property('featureName').that.is.a('string');\r",
									"        pm.expect(log).to.have.property('fkn').that.is.a('string');\r",
									"        pm.expect(log).to.have.property('productCode').that.is.a('string');\r",
									"        pm.expect(log).to.have.property('httpStatus').that.is.a('string');\r",
									"        pm.expect(log).to.have.property('requestPayload').that.is.a('string');\r",
									"        pm.expect(log).to.have.property('responseBody').that.is.a('string');\r",
									"        pm.expect(log).to.have.property('createdAt').that.is.a('string');\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/call-logs?transactionId=TXN77777777&fkn=NP67890&featureName=&fromDate=&toDate=",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"call-logs"
							],
							"query": [
								{
									"key": "transactionId",
									"value": "TXN77777777"
								},
								{
									"key": "fkn",
									"value": "NP67890"
								},
								{
									"key": "featureName",
									"value": ""
								},
								{
									"key": "fromDate",
									"value": ""
								},
								{
									"key": "toDate",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search by all Parameters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var template = `\r",
									"<style type=\"text/css\">\r",
									"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
									"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
									"    .tftable tr {background-color:#ffffff;}\r",
									"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
									"    .tftable tr:hover {background-color:#e0ffff;}\r",
									"</style>\r",
									"\r",
									"<table class=\"tftable\" border=\"1\">\r",
									"    <tr>\r",
									"        <th>ID</th>\r",
									"        <th>Transaction ID</th>\r",
									"        <th>Feature Name</th>\r",
									"        <th>FKN</th>\r",
									"        <th>Product Code</th>\r",
									"        <th>HTTP Status</th>\r",
									"        <th>Request Payload</th>\r",
									"        <th>Response Body</th>\r",
									"        <th>Created At</th>\r",
									"    </tr>\r",
									"    \r",
									"    {{#each response}}\r",
									"        <tr id=row_{{@key}}>\r",
									"            <td>{{id}}</td>\r",
									"            <td>{{transactionId}}</td>\r",
									"            <td>{{featureName}}</td>\r",
									"            <td>{{fkn}}</td>\r",
									"            <td>{{productCode}}</td>\r",
									"            <td>{{httpStatus}}</td>\r",
									"            <td>{{requestPayload}}</td>\r",
									"            <td>{{responseBody}}</td>\r",
									"            <td>{{createdAt}}</td>\r",
									"        </tr>\r",
									"    {{/each}}\r",
									"</table>\r",
									"`;\r",
									"\r",
									"function constructVisualizerPayload() {\r",
									"    var vizData = pm.response.json();\r",
									"\r",
									"    return {response: vizData}\r",
									"}\r",
									"\r",
									"pm.visualizer.set(template, constructVisualizerPayload());\r",
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the schema for each log object in the response\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function(log) {\r",
									"        pm.expect(log).to.have.property('id').that.is.a('number');\r",
									"        pm.expect(log).to.have.property('transactionId').that.is.a('string');\r",
									"        pm.expect(log).to.have.property('featureName').that.is.a('string');\r",
									"        pm.expect(log).to.have.property('fkn').that.is.a('string');\r",
									"        pm.expect(log).to.have.property('productCode').that.is.a('string');\r",
									"        pm.expect(log).to.have.property('httpStatus').that.is.a('string');\r",
									"        pm.expect(log).to.have.property('requestPayload').that.is.a('string');\r",
									"        pm.expect(log).to.have.property('responseBody').that.is.a('string');\r",
									"        pm.expect(log).to.have.property('createdAt').that.is.a('string');\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/call-logs?transactionId=TXN123456&fkn=NP67890&featureName=schufa-check&fromDate=2024-11-22T00:00:00&toDate=2024-11-23T23:59:59",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"call-logs"
							],
							"query": [
								{
									"key": "transactionId",
									"value": "TXN123456"
								},
								{
									"key": "fkn",
									"value": "NP67890"
								},
								{
									"key": "featureName",
									"value": "schufa-check"
								},
								{
									"key": "fromDate",
									"value": "2024-11-22T00:00:00"
								},
								{
									"key": "toDate",
									"value": "2024-11-23T23:59:59"
								}
							]
						},
						"description": "# API Call Logs\n\nThis endpoint retrieves call logs based on the provided query parameters.\n\n## Request\n\n### Query Parameters\n\n- `transactionId` (optional): The transaction ID for filtering call logs.\n    \n- `fkn`: The FKN for filtering call logs.\n    \n- `featureName`: The feature name for filtering call logs.\n    \n- `fromDate`: The start date and time for filtering call logs.\n    \n- `toDate`: The end date and time for filtering call logs.\n    \n\n### Example\n\n``` http\nGET http://localhost:8080/api/call-logs?transactionId=&fkn=NP67890&featureName=schufa-check&fromDate=2024-11-22T00:00:00&toDate=2024-11-23T23:59:59\n\n ```\n\n## Response\n\n### Status\n\n- `200 OK`: The request was successful.\n    \n\n### Headers\n\n- `Content-Type`: application/json\n    \n\n### Body\n\nThe response body is a JSON array containing call log objects with the following attributes:\n\n- `id`: The ID of the call log.\n    \n- `transactionId`: The transaction ID associated with the call log.\n    \n- `featureName`: The feature name associated with the call log.\n    \n- `fkn`: The FKN associated with the call log.\n    \n- `productCode`: The product code associated with the call log.\n    \n- `httpStatus`: The HTTP status associated with the call log.\n    \n- `requestPayload`: The request payload associated with the call log.\n    \n- `responseBody`: The response body associated with the call log.\n    \n- `createdAt`: The timestamp indicating when the call log was created.\n    \n\n### Example Response\n\n``` json\n[\n    {\n        \"id\": 0,\n        \"transactionId\": \"\",\n        \"featureName\": \"\",\n        \"fkn\": \"\",\n        \"productCode\": \"\",\n        \"httpStatus\": \"\",\n        \"requestPayload\": \"\",\n        \"responseBody\": \"\",\n        \"createdAt\": \"\"\n    }\n]\n\n ```"
					},
					"response": []
				},
				{
					"name": "Search without any Para",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var template = `\r",
									"<style type=\"text/css\">\r",
									"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
									"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
									"    .tftable tr {background-color:#ffffff;}\r",
									"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
									"    .tftable tr:hover {background-color:#e0ffff;}\r",
									"</style>\r",
									"\r",
									"<table class=\"tftable\" border=\"1\">\r",
									"    <tr>\r",
									"        <th>ID</th>\r",
									"        <th>Transaction ID</th>\r",
									"        <th>Feature Name</th>\r",
									"        <th>FKN</th>\r",
									"        <th>Product Code</th>\r",
									"        <th>HTTP Status</th>\r",
									"        <th>Request Payload</th>\r",
									"        <th>Response Body</th>\r",
									"        <th>Created At</th>\r",
									"    </tr>\r",
									"    \r",
									"    {{#each response}}\r",
									"        <tr id=row_{{@key}}>\r",
									"            <td>{{id}}</td>\r",
									"            <td>{{transactionId}}</td>\r",
									"            <td>{{featureName}}</td>\r",
									"            <td>{{fkn}}</td>\r",
									"            <td>{{productCode}}</td>\r",
									"            <td>{{httpStatus}}</td>\r",
									"            <td>{{requestPayload}}</td>\r",
									"            <td>{{responseBody}}</td>\r",
									"            <td>{{createdAt}}</td>\r",
									"        </tr>\r",
									"    {{/each}}\r",
									"</table>\r",
									"`;\r",
									"\r",
									"function constructVisualizerPayload() {\r",
									"    var vizData = pm.response.json();\r",
									"\r",
									"    return {response: vizData}\r",
									"}\r",
									"\r",
									"pm.visualizer.set(template, constructVisualizerPayload());\r",
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the schema for each log object in the response\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function(log) {\r",
									"        pm.expect(log).to.have.property('id').that.is.a('number');\r",
									"        pm.expect(log).to.have.property('transactionId').that.is.a('string');\r",
									"        pm.expect(log).to.have.property('featureName').that.is.a('string');\r",
									"        pm.expect(log).to.have.property('fkn').that.is.a('string');\r",
									"        pm.expect(log).to.have.property('productCode').that.is.a('string');\r",
									"        pm.expect(log).to.have.property('httpStatus').that.is.a('string');\r",
									"        pm.expect(log).to.have.property('requestPayload').that.is.a('string');\r",
									"        pm.expect(log).to.have.property('responseBody').that.is.a('string');\r",
									"        pm.expect(log).to.have.property('createdAt').that.is.a('string');\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/call-logs?transactionId=&fkn=&featureName=&fromDate=&toDate=2024-11-23T23:59:59",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"call-logs"
							],
							"query": [
								{
									"key": "transactionId",
									"value": ""
								},
								{
									"key": "fkn",
									"value": ""
								},
								{
									"key": "featureName",
									"value": ""
								},
								{
									"key": "fromDate",
									"value": ""
								},
								{
									"key": "toDate",
									"value": "2024-11-23T23:59:59"
								}
							]
						},
						"description": "# API Call Logs\n\nThis endpoint retrieves call logs based on the provided query parameters.\n\n## Request\n\n### Query Parameters\n\n- `transactionId` (optional): The transaction ID for filtering call logs.\n    \n- `fkn`: The FKN for filtering call logs.\n    \n- `featureName`: The feature name for filtering call logs.\n    \n- `fromDate`: The start date and time for filtering call logs.\n    \n- `toDate`: The end date and time for filtering call logs.\n    \n\n### Example\n\n``` http\nGET http://localhost:8080/api/call-logs?transactionId=&fkn=NP67890&featureName=schufa-check&fromDate=2024-11-22T00:00:00&toDate=2024-11-23T23:59:59\n\n ```\n\n## Response\n\n### Status\n\n- `200 OK`: The request was successful.\n    \n\n### Headers\n\n- `Content-Type`: application/json\n    \n\n### Body\n\nThe response body is a JSON array containing call log objects with the following attributes:\n\n- `id`: The ID of the call log.\n    \n- `transactionId`: The transaction ID associated with the call log.\n    \n- `featureName`: The feature name associated with the call log.\n    \n- `fkn`: The FKN associated with the call log.\n    \n- `productCode`: The product code associated with the call log.\n    \n- `httpStatus`: The HTTP status associated with the call log.\n    \n- `requestPayload`: The request payload associated with the call log.\n    \n- `responseBody`: The response body associated with the call log.\n    \n- `createdAt`: The timestamp indicating when the call log was created.\n    \n\n### Example Response\n\n``` json\n[\n    {\n        \"id\": 0,\n        \"transactionId\": \"\",\n        \"featureName\": \"\",\n        \"fkn\": \"\",\n        \"productCode\": \"\",\n        \"httpStatus\": \"\",\n        \"requestPayload\": \"\",\n        \"responseBody\": \"\",\n        \"createdAt\": \"\"\n    }\n]\n\n ```"
					},
					"response": []
				}
			]
		},
		{
			"name": "Health Check Endpoints",
			"item": [
				{
					"name": "/health",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/actuator/health",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"actuator",
								"health"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}